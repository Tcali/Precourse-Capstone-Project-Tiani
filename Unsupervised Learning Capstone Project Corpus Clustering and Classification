{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unit 4 Capstone for Unsupervised Learning: Corpus Clustering and Classification\n",
    "\n",
    "Purpose:  \n",
    "Import 10 texts from 10 different authors and determine the best unsupervised learning methods to identify/predict the correct author given a subset of words.\n",
    "\n",
    "Methodology: Import 10 texts and clean them. Then reduce the text into paragraphs, isolate the 2000 most common vocabulary words, and combine them all into a large dataset. Then, identify which of the clustering methods learned in this course are able to determine the author of the works the best. Next, we would identify the highest accuracy of info using the supervised learning regresison models, checking against the known authors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sn\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from IPython.display import display\n",
    "plt.style.use('bmh')\n",
    "# For clustering\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import normalize\n",
    "from sklearn.cluster import MiniBatchKMeans\n",
    "from sklearn.cluster import MeanShift, estimate_bandwidth\n",
    "from sklearn.cluster import SpectralClustering\n",
    "from sklearn.cluster import AffinityPropagation\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import train_test_split\n",
    "from itertools import cycle\n",
    "from sklearn.metrics import pairwise_distances\n",
    "# For NLP\n",
    "import re\n",
    "from nltk.corpus import gutenberg, stopwords\n",
    "from collections import Counter\n",
    "import nltk\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "import string\n",
    "# For Regression Analysis\n",
    "from sklearn import ensemble\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.model_selection import cross_val_score\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reading in the data, this time in the form of paragraphs\n",
    "persuasion = gutenberg.paras('austen-persuasion.txt')\n",
    "alice = gutenberg.paras('carroll-alice.txt')\n",
    "stories = gutenberg.paras('bryant-stories.txt')\n",
    "bb = gutenberg.paras('burgess-busterbrown.txt')\n",
    "thur = gutenberg.paras('chesterton-thursday.txt')\n",
    "parents = gutenberg.paras('edgeworth-parents.txt')\n",
    "macbeth = gutenberg.paras('shakespeare-macbeth.txt')\n",
    "leaves = gutenberg.paras('whitman-leaves.txt')\n",
    "poems = gutenberg.paras('blake-poems.txt')\n",
    "moby = gutenberg.paras('melville-moby_dick.txt')\n",
    "\n",
    "# processing\n",
    "def process(text):\n",
    "    text_para = []\n",
    "    for paragraph in text:\n",
    "        para = paragraph[0]\n",
    "        # removing the double-dash from all words\n",
    "        para = [re.sub(r'--', '', word) for word in para]\n",
    "        para = [re.sub(\"[\\[].*?[\\]]\", \"\", word)for word in para]\n",
    "        # The Chapter indicator is idiosyncratic\n",
    "        para = [re.sub(r'Chapter \\d+', '', word) for word in para]\n",
    "        para = [re.sub(r'CHAPTER .*', '', word) for word in para]\n",
    "        # Forming each paragraph into a string and adding it to the list of strings.\n",
    "        text_para.append(' '.join(para))\n",
    "    return text_para"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run texts through the processor\n",
    "persuasion_para = process(persuasion)\n",
    "alice_para = process(alice)\n",
    "stories_para = process(stories)\n",
    "bb_para = process(bb)\n",
    "thur_para = process(thur)\n",
    "parents_para = process(parents)\n",
    "macbeth_para = process(macbeth)\n",
    "leaves_para = process(leaves)\n",
    "poems_para = process(poems)\n",
    "moby_para = process(moby)\n",
    "\n",
    "all_para = persuasion_para + alice_para + stories_para + bb_para + \\\n",
    "    thur_para + parents_para + macbeth_para + \\\n",
    "    leaves_para + poems_para + moby_para"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now do count vectorization with stop word removal\n",
    "# Will automatically compute unique vocab\n",
    "cv = CountVectorizer(stop_words='english', max_features=2000)\n",
    "y = ['Carrol'] * len(alice_para) + ['Austen'] * len(persuasion_para) + ['Bryant'] * len(stories_para) + ['Burgess'] * len(bb_para) + ['Chesterton'] * len(thur_para) + \\\n",
    "    ['Edgeworth'] * len(parents_para) + ['Shakespeare'] * len(macbeth_para) + ['Whitman'] * \\\n",
    "    len(leaves_para) + ['Blake'] * \\\n",
    "    len(poems_para) + ['Melville'] * len(moby_para)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14556, 2000)\n"
     ]
    }
   ],
   "source": [
    "X = cv.fit_transform(all_para).toarray()\n",
    "print(X.shape)  # Number of sentences by number of vocab terms\n",
    "vocab_dict = cv.vocabulary_  # Gets you a mapping of term to column index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# do later\n",
    "# alice = None\n",
    "# persuasion = None\n",
    "# alice_lemmas = None\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K-Means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Normalize the data.\n",
    "X_norm = normalize(X)\n",
    "\n",
    "# Reduce it to two components.\n",
    "X_pca_2 = PCA(2).fit_transform(X_norm)\n",
    "X_pca_10 = PCA(10).fit_transform(X_norm)\n",
    "\n",
    "# Calculate predicted values.\n",
    "y_pred = KMeans(n_clusters=10, random_state=42).fit_predict(X_pca_10)\n",
    "\n",
    "# Plot the solution.\n",
    "plt.scatter(X_pca_2[:, 0], X_pca_2[:, 1], c=y_pred)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Check the solution against the data.\n",
    "X_norm = None\n",
    "\n",
    "crosstab = np.zeros((len(np.unique(y)), len(np.unique(y_pred))))\n",
    "row_name = np.unique(y)\n",
    "col_name = np.unique(y_pred)\n",
    "\n",
    "for idx1, key1 in enumerate(row_name):\n",
    "    for idx2, key2 in enumerate(col_name):\n",
    "        crosstab[idx1, idx2] = len(y[(y==key1) & (y_pred==key2)])\n",
    "\n",
    "crosstab_df = pd.DataFrame(crosstab, index=row_name, columns=col_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Austen</th>\n",
       "      <td>617.0</td>\n",
       "      <td>259.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Blake</th>\n",
       "      <td>234.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bryant</th>\n",
       "      <td>669.0</td>\n",
       "      <td>184.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>254.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burgess</th>\n",
       "      <td>177.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carrol</th>\n",
       "      <td>598.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chesterton</th>\n",
       "      <td>785.0</td>\n",
       "      <td>343.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Edgeworth</th>\n",
       "      <td>2484.0</td>\n",
       "      <td>572.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>128.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Melville</th>\n",
       "      <td>2132.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>136.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shakespeare</th>\n",
       "      <td>554.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Whitman</th>\n",
       "      <td>2214.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  0      1     2      3      4      5      6      7     8  \\\n",
       "Austen        617.0  259.0  17.0    0.0   15.0    6.0   58.0    6.0   5.0   \n",
       "Blake         234.0    4.0   4.0    0.0    0.0    0.0   28.0    9.0   0.0   \n",
       "Bryant        669.0  184.0  16.0    0.0    0.0    0.0  254.0   53.0   2.0   \n",
       "Burgess       177.0   10.0   2.0    0.0    0.0    0.0   60.0    4.0   3.0   \n",
       "Carrol        598.0   55.0  20.0    0.0   21.0   40.0   43.0   19.0   4.0   \n",
       "Chesterton    785.0  343.0  11.0    0.0   15.0    9.0   29.0   68.0   7.0   \n",
       "Edgeworth    2484.0  572.0  81.0    0.0   10.0  127.0  148.0  102.0  74.0   \n",
       "Melville     2132.0  127.0  32.0    0.0  136.0   90.0   55.0  177.0   8.0   \n",
       "Shakespeare   554.0    0.0   0.0  115.0    0.0    0.0    2.0    5.0   0.0   \n",
       "Whitman      2214.0   10.0   0.0    0.0    0.0    0.0   38.0  162.0   5.0   \n",
       "\n",
       "                 9  \n",
       "Austen        49.0  \n",
       "Blake          5.0  \n",
       "Bryant        16.0  \n",
       "Burgess       10.0  \n",
       "Carrol        17.0  \n",
       "Chesterton    21.0  \n",
       "Edgeworth    128.0  \n",
       "Melville      36.0  \n",
       "Shakespeare    2.0  \n",
       "Whitman       49.0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crosstab_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mini Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Each batch will be made up of 200 data points.\n",
    "minibatchkmeans = MiniBatchKMeans(\n",
    "    init='random',\n",
    "    n_clusters=10,\n",
    "    batch_size=200)\n",
    "minibatchkmeans.fit(X_pca_10)\n",
    "\n",
    "# Add the new predicted cluster memberships to the data frame.\n",
    "predict_mini = minibatchkmeans.predict(X_pca_10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Comparing MiniBatch to ones in data\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Austen</th>\n",
       "      <td>48.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>477.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Blake</th>\n",
       "      <td>5.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>201.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bryant</th>\n",
       "      <td>14.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>186.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>591.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burgess</th>\n",
       "      <td>9.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>168.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carrol</th>\n",
       "      <td>17.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>342.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chesterton</th>\n",
       "      <td>17.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>355.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>602.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Edgeworth</th>\n",
       "      <td>122.0</td>\n",
       "      <td>153.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>633.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>722.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1707.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Melville</th>\n",
       "      <td>33.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>249.0</td>\n",
       "      <td>378.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>1630.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shakespeare</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>465.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Whitman</th>\n",
       "      <td>53.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>206.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>216.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>1876.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 0      1      2      3      4      5      6      7      8  \\\n",
       "Austen        48.0   59.0    8.0  261.0    0.0   37.0    3.0   94.0   45.0   \n",
       "Blake          5.0   28.0    9.0    4.0    0.0    7.0    0.0   23.0    7.0   \n",
       "Bryant        14.0  253.0   56.0  186.0    0.0   20.0   10.0   44.0   20.0   \n",
       "Burgess        9.0   61.0    5.0   10.0    0.0    2.0    0.0    8.0    3.0   \n",
       "Carrol        17.0   43.0   26.0   58.0    0.0   80.0    0.0  222.0   29.0   \n",
       "Chesterton    17.0   28.0   72.0  355.0    0.0   29.0    7.0  156.0   22.0   \n",
       "Edgeworth    122.0  153.0  123.0  633.0    0.0  166.0    0.0  722.0  100.0   \n",
       "Melville      33.0   51.0  175.0  131.0    0.0  249.0  378.0   89.0   57.0   \n",
       "Shakespeare    2.0    2.0    5.0    0.0  115.0    0.0    0.0   88.0    1.0   \n",
       "Whitman       53.0   41.0  206.0   10.0    0.0    0.0   17.0  216.0   59.0   \n",
       "\n",
       "                  9  \n",
       "Austen        477.0  \n",
       "Blake         201.0  \n",
       "Bryant        591.0  \n",
       "Burgess       168.0  \n",
       "Carrol        342.0  \n",
       "Chesterton    602.0  \n",
       "Edgeworth    1707.0  \n",
       "Melville     1630.0  \n",
       "Shakespeare   465.0  \n",
       "Whitman      1876.0  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the MiniBatch model against our earlier one.\n",
    "print('Comparing MiniBatch to ones in data')\n",
    "crosstab = np.zeros((len(np.unique(y)), len(np.unique(predict_mini))))\n",
    "row_name = np.unique(y)\n",
    "col_name = np.unique(predict_mini)\n",
    "\n",
    "for idx1, key1 in enumerate(row_name):\n",
    "    for idx2, key2 in enumerate(col_name):\n",
    "        crosstab[idx1, idx2] = len(y[(y==key1) & (predict_mini==key2)])\n",
    "\n",
    "crosstab_df = pd.DataFrame(crosstab, index=row_name, columns=col_name)\n",
    "crosstab_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mean Shift"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Divide into training and test sets.\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X,\n",
    "    y,\n",
    "    test_size=0.25,\n",
    "    random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here we set the bandwidth. This function automatically derives a bandwidth\n",
    "# number based on an inspection of the distances among points in the data.\n",
    "bandwidth = estimate_bandwidth(X_train, quantile=0.2, n_samples=500)\n",
    "\n",
    "# Declare and fit the model.\n",
    "ms = MeanShift(bandwidth=bandwidth, bin_seeding=True)\n",
    "ms.fit(X_train)\n",
    "\n",
    "# Extract cluster assignments for each data point.\n",
    "labels = ms.labels_\n",
    "\n",
    "# Coordinates of the cluster centers.\n",
    "cluster_centers = ms.cluster_centers_\n",
    "\n",
    "# Count our clusters.\n",
    "n_clusters_ = len(np.unique(labels))\n",
    "\n",
    "print(\"Number of estimated clusters: {}\".format(n_clusters_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "short_y = y[0:len(labels)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plt.scatter(X_train[:, 0], X_train[:, 1], c=labels)\n",
    "# plt.show()\n",
    "\n",
    "print('Comparing the assigned categories to the ones in the data:')\n",
    "crosstab = np.zeros((len(np.unique(short_y)), len(np.unique(labels))))\n",
    "row_name = np.unique(short_y)\n",
    "col_name = np.unique(labels)\n",
    "\n",
    "for idx1, key1 in enumerate(row_name):\n",
    "    for idx2, key2 in enumerate(col_name):\n",
    "        crosstab[idx1, idx2] = len(short_y[(short_y==key1) & (labels==key2)])\n",
    "\n",
    "crosstab_df = pd.DataFrame(crosstab, index=row_name, columns=col_name)\n",
    "crosstab_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Seems like the K Means Mini Batch clustering is working the best"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Adjusted Rand Index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.016157968537690297"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.adjusted_rand_score(y, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set score: 0.9009801227443437\n",
      "\n",
      "Test set score: 0.6166529266281946\n"
     ]
    }
   ],
   "source": [
    "rfc = ensemble.RandomForestClassifier()\n",
    "train = rfc.fit(X_train, y_train)\n",
    "\n",
    "print('Training set score:', rfc.score(X_train, y_train))\n",
    "print('\\nTest set score:', rfc.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set score: 0.8049830539525511\n",
      "\n",
      "Test set score: 0.7109095905468535\n"
     ]
    }
   ],
   "source": [
    "lr = LogisticRegression()\n",
    "train = lr.fit(X_train, y_train)\n",
    "# print(X_train.shape, y_train.shape)\n",
    "print('Training set score:', lr.score(X_train, y_train))\n",
    "print('\\nTest set score:', lr.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = ensemble.GradientBoostingClassifier()\n",
    "train = clf.fit(X_train, y_train)\n",
    "\n",
    "print('Training set score:', clf.score(X_train, y_train))\n",
    "print('\\nTest set score:', clf.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.54320988, 0.65785861, 0.63839286, 0.61554333, 0.58121129])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_val_score(lr, X, y, cv=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unsupervised NLP\n",
    "Use LSA to prepare text data for classification in supervised learning. In that case, the goal would be to use LSA to arrive at a smaller set of features that can be used to build a supervised model that will classify text into pre-labelled categories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of features: 10554\n",
      "Original sentence: To this speech Mr . Somerville made no answer , but turned away to look at the bow window of a handsome new inn , which the glazier was at this instant glazing .\n",
      "Tf_idf vector: {'glazier': 0.3799373133912812, 'somerville': 0.3001458712816921, 'bow': 0.27060702750491933, 'instant': 0.26202049175557457, 'inn': 0.2919444086605154, 'window': 0.2593043801119187, 'speech': 0.28641186105575345, 'new': 0.2201892854462231, 'answer': 0.2537930159494784, 'away': 0.20032983203458532, 'look': 0.2041166476556295, 'mr': 0.19445875919531996, 'handsome': 0.3128990823610265, 'turned': 0.24241540869037054}\n"
     ]
    }
   ],
   "source": [
    "# tf-idf\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "X_train, X_test = train_test_split(all_para, test_size=0.25, random_state=0)\n",
    "\n",
    "vectorizer = TfidfVectorizer(max_df=0.5, # drop words that occur in more than half the paragraphs\n",
    "                             min_df=2, # only use words that appear at least twice\n",
    "                             stop_words='english', \n",
    "                             lowercase=True, #convert everything to lower case (since Alice in Wonderland has the HABIT of CAPITALIZING WORDS for EMPHASIS)\n",
    "                             use_idf=True,#we definitely want to use inverse document frequencies in our weighting\n",
    "                             norm=u'l2', #Applies a correction factor so that longer paragraphs and shorter paragraphs get treated equally\n",
    "                             smooth_idf=True #Adds 1 to all document frequencies, as if an extra document existed that used every word once.  Prevents divide-by-zero errors\n",
    "                            )\n",
    "\n",
    "\n",
    "#Applying the vectorizer\n",
    "all_paras_tfidf=vectorizer.fit_transform(all_para)\n",
    "print(\"Number of features: %d\" % all_paras_tfidf.get_shape()[1])\n",
    "\n",
    "#splitting into training and test sets\n",
    "X_train_tfidf, X_test_tfidf= train_test_split(all_paras_tfidf, test_size=0.25, random_state=0)\n",
    "\n",
    "\n",
    "#Reshapes the vectorizer output into something people can read\n",
    "X_train_tfidf_csr = X_train_tfidf.tocsr()\n",
    "\n",
    "#number of paragraphs\n",
    "n = X_train_tfidf_csr.shape[0]\n",
    "#A list of dictionaries, one per paragraph\n",
    "tfidf_bypara = [{} for _ in range(0,n)]\n",
    "#List of features\n",
    "terms = vectorizer.get_feature_names()\n",
    "#for each paragraph, lists the feature words and their tf-idf scores\n",
    "for i, j in zip(*X_train_tfidf_csr.nonzero()):\n",
    "    tfidf_bypara[i][terms[j]] = X_train_tfidf_csr[i, j]\n",
    "\n",
    "#Keep in mind that the log base 2 of 1 is 0, so a tf-idf score of 0 indicates that the word was present once in that sentence.\n",
    "print('Original sentence:', X_train[5])\n",
    "print('Tf_idf vector:', tfidf_bypara[5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent variance captured by all components: 24.470159385061947\n",
      "Component 0:\n",
      "CHAPTER 131    0.999635\n",
      "CHAPTER 56     0.999635\n",
      "CHAPTER 110    0.999635\n",
      "CHAPTER 127    0.999635\n",
      "CHAPTER 124    0.999635\n",
      "CHAPTER 87     0.999635\n",
      "CHAPTER 78     0.999635\n",
      "CHAPTER V      0.999635\n",
      "CHAPTER 82     0.999635\n",
      "CHAPTER 2      0.999635\n",
      "Name: 0, dtype: float64\n",
      "Component 1:\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Macb .    1.0\n",
      "Name: 1, dtype: float64\n",
      "Component 2:\n",
      "\" Oh , at Harrow ,\" said the policeman                                                                          0.887492\n",
      "\" Oh , they ,\" said the new detective contemptuously ; \" no they are not a very valuable force .                0.879312\n",
      "\" Oh , please , mighty and kindly Elephant ,\" he said , making a very low bow , \" will you do me a favour ?\"    0.875396\n",
      "\" Oh , perhaps you hav ' n ' t got any ,\" he said quickly .                                                     0.801282\n",
      "\" Oh , no ,\" said the little girl , \" those are bullfrogs , croaking .\"                                         0.794998\n",
      "' Oh , YOU sing ,' said the Gryphon .                                                                           0.775626\n",
      "\" Oh , no ,\" said Paul ; \" here are some blackberries for you ; you had better wait a little bit longer .       0.757529\n",
      "\" Oh , I do beg your pardon ,\" said the little Jackal .                                                         0.753040\n",
      "' Oh , you can ' t help that ,' said the Cat : ' we ' re all mad here .                                         0.746761\n",
      "\" Oh , I am crying because I do not know how to keep the house ,\" said Elsa .                                   0.723900\n",
      "Name: 2, dtype: float64\n",
      "Component 3:\n",
      "Oh , that ' s only nominal !    0.702203\n",
      "Oh , grassy glades !            0.702158\n",
      "\" Oh , no .                     0.702090\n",
      "\" Oh !                          0.702090\n",
      "\" Oh !                          0.702090\n",
      "\" Oh !                          0.702090\n",
      "\" Oh !                          0.702090\n",
      "\" Oh !\"                         0.702090\n",
      "\" Oh !                          0.702090\n",
      "\" Oh !                          0.702090\n",
      "Name: 3, dtype: float64\n",
      "Component 4:\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Just .    0.980841\n",
      "Name: 4, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Dimension reduction\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import Normalizer\n",
    "\n",
    "#Our SVD data reducer.  We are going to reduce the feature space from 1232 to 130.\n",
    "svd= TruncatedSVD(130)\n",
    "lsa = make_pipeline(svd, Normalizer(copy=False))\n",
    "# Run SVD on the training data, then project the training data.\n",
    "X_train_lsa = lsa.fit_transform(X_train_tfidf)\n",
    "\n",
    "variance_explained=svd.explained_variance_ratio_\n",
    "total_variance = variance_explained.sum()\n",
    "print(\"Percent variance captured by all components:\",total_variance*100)\n",
    "\n",
    "#Looking at what sorts of paragraphs our solution considers similar, for the first five identified topics\n",
    "paras_by_component=pd.DataFrame(X_train_lsa,index=X_train)\n",
    "for i in range(5):\n",
    "    print('Component {}:'.format(i))\n",
    "    print(paras_by_component.loc[:,i].sort_values(ascending=False)[0:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original sentence: \" That ' s what he never did yet ,\" said the carpenter .\n",
      "Tf_idf vector: {'carpenter': 0.7786448870456927, 'said': 0.33553186594843437, 'did': 0.5302174146619123}\n"
     ]
    }
   ],
   "source": [
    "# same model, only with the test set data. \n",
    "#Reshapes the vectorizer output into something people can read\n",
    "X_test_tfidf_csr = X_test_tfidf.tocsr()\n",
    "\n",
    "#number of paragraphs\n",
    "n = X_test_tfidf_csr.shape[0]\n",
    "#A list of dictionaries, one per paragraph\n",
    "tfidf_bypara = [{} for _ in range(0,n)]\n",
    "#List of features\n",
    "terms = vectorizer.get_feature_names()\n",
    "#for each paragraph, lists the feature words and their tf-idf scores\n",
    "for i, j in zip(*X_test_tfidf_csr.nonzero()):\n",
    "    tfidf_bypara[i][terms[j]] = X_test_tfidf_csr[i, j]\n",
    "\n",
    "#Keep in mind that the log base 2 of 1 is 0, so a tf-idf score of 0 indicates that the word was present once in that sentence.\n",
    "print('Original sentence:', X_test[5])\n",
    "print('Tf_idf vector:', tfidf_bypara[5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent variance captured by all components: 26.04558747386151\n"
     ]
    }
   ],
   "source": [
    "#Our SVD data reducer.  We are going to reduce the feature space from 1232 to 130.\n",
    "svd= TruncatedSVD(130)\n",
    "lsa = make_pipeline(svd, Normalizer(copy=False))\n",
    "# Run SVD on the test data, then project the test data.\n",
    "X_test_lsa = lsa.fit_transform(X_test_tfidf)\n",
    "\n",
    "variance_explained=svd.explained_variance_ratio_\n",
    "total_variance = variance_explained.sum()\n",
    "print(\"Percent variance captured by all components:\",total_variance*100)\n",
    "\n",
    "# #Looking at what sorts of paragraphs our solution considers similar, for the first five identified topics\n",
    "# paras_by_component=pd.DataFrame(X_test_lsa,index=X_test)\n",
    "# for i in range(5):\n",
    "#     print('Component {}:'.format(i))\n",
    "#     print(paras_by_component.loc[:,i].sort_values(ascending=False)[0:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# See if the unsupervised NLP work helped us "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set score: 0.26261793533021893\n",
      "\n",
      "Test set score: 0.22423742786479803\n"
     ]
    }
   ],
   "source": [
    "lr = LogisticRegression()\n",
    "train = lr.fit(X_train_lsa, y_train)\n",
    "# print(X_train.shape, y_train.shape)\n",
    "print('Training set score:', lr.score(X_train_lsa, y_train))\n",
    "print('\\nTest set score:', lr.score(X_test_lsa, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Results\n",
    "__The best Clustering Method:__ K Means Minibatch  \n",
    "__The best Supervised Learning Regression  Model:__ Logistic Regression  \n",
    "__The best accuracy score:__   \n",
    "Logistic Regression on the paragraph-grouped text data for 10 different authors, minus stop words and punctuation, isolating the top 2000 most common vocabulary words within the paragraphs.  \n",
    "Reminder, the __Accuracy Score Results for LR:__  \n",
    "Training set score: 0.8049830539525511  \n",
    "Test set score: 0.7109095905468535  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
